<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        G/+CcRr/hXQZ/4FwF/9qThb/ckMb9z4lCsUxHwesMh8HkTIfB2gyHwc0Mh8HDQAAAACyoCEAsZ4hLLqn
        I+m6pyP/uKUi/7ajI/97Zxn/o48c/62ZHv+olR7/o5Ah/52HGf+LZxX/hVAW/35FFP9ULhD/d04Z/3lm
        HP9+bh7/gXEd/4RzHP+Hdhv/i3ga/4ZzF/9ZPxLvNyEJxjIfB7IyHweZMh8HcDIfBzwyHwcSAAAAAL+s
        JQC7qCRIwa4m+MCtJf++qyT/uKUm/3toG/+tmR//sZ4g/6yZH/+nlR7/qH4e/6JcHP+gWBv/iksX/1gw
        Ef+ASBz/gFMc/4BsH/+Dcx//hnYf/4l3Hf+MeRv/jnsa/1lHD9wwHQe8Mh8HrjIfB5QyHwdqMh8HNjIf
        BxGWgBYAzLcpAMGtJmrJtCj/x7Mn/8WxJ/+7qCv/fGgg/66aI/+2oyL/sZ4h/6yZH/+wgCH/qmAf/6Vd
        Hf+QUBn/WzMU/4JKHv+FTh7/g2sh/4V1Iv+JdyH/i3of/458Hv+Qfhv/ZVMR2DAdB6gyHweWMh8HejIf
        B1EyHwckMh8HCaWTHwD//z8AyrYpjs+6Kv/NuCn/yrUp/6GOKf9uWRj/oo4g/7uoJf+1oiP/sJ0h/7SC
        If+yaCP/unUv/8KAOP+RWSX/hU4i/4hQIP+FbCP/h3ck/4t6JP+NfCL/j34g/5GAHv9yYBXOMB0HfTIf
        B2cyHwdLMh8HKjIfBw8yHwcDvq0mALqqJgXOuyuwwKwn/6qXIf/Isyr/t6Mn/7qmJ//Crij/vaon/7qn
        J/+/rS7/z6A8/9iURv/blUH/1os0/8t/K/+mZSf/jVUm/4dtJv+JeSf/jHwn/49+Jf+QgCL/k4Ef/4Jw
        GcM0IQdCMh8HLjIfBxwyHwcMMh8HAzIfBwCUdRsAjXAaGKKAHtB+Vxb/d2IW/866Lf/Quy7/zLct/8q2
        Mf/PvTz/18dE/9jJRP/Wvkf/2aE9/9eLMP/Uhi7/0oMs/8yAKv+tdib/jHYn/4p7Kv+Ofin/kYAo/5KB
        Jf+VgyL/j30ew0k3DBouGwYJMh8HBDIfBwEyHwcAMh8HAJNTGgqjXx2Up2Ee+oBHFv+GcBv/1cIy/9bE
        Ov/dzEj/49NP/9/QTP/WyUn/08VH/9TEPv/VvjP/16cw/9SRLv/Oliv/x6Io/8OrJv+xnyX/lIQp/49/
        LP+Sgir/lIMo/4BwH/+Fcx3PfW0ZFHVmGAAGBAEAAAAAAAAAAAAAAAAArWYgJLVrIt20aSD/eUUV/52K
        K//q3FL/691W/+TWUf/azU3/2MpK/9rLQP/byjf/2Mcy/9XCMP/Tvi7/0bcs/823Kv/Ktin/x7Mn/8Ov
        Jv+3pCX/nYwo/5ODLf+WhSv/T0MV/2ZAFuiCUhw7n28jAEUkDQAAAAAAAAAAAAAAAAC0ayFCu3El78J6
        L/+UXij/iWoq/76vQf/YzE3/3tFM/+DSQv/g0Dr/3s42/9vLNP/ZyDL/18Qw/9TALv/RvSz/z7or/8y3
        Kf/JtCj/xbAn/8CtJf+5pyT/pJMn/5mILP9WShj/YTcW/4ZMHsR7RRoWfEYbAAAAAAAAAAAAAAAAAMuJ
        PWLcm0r65qVP/9yWPv+0ciz/jl4q/5d9K//SwTX/5NQ5/+HQN//ezjX/3Mwz/9rJMf/Xxi//1cEt/9K+
        LP/Quyv/zbgp/8q1KP/GsSf/wa4m/72qJP+4piL/qpcl/4JkIf9sPhr/iVAh631HHC9/SBwAAAAAAAAA
        AAAAAAAA26NYIuOgRpLimTjp4ZY1/96TNP/QjTD/t5Et/9LBMf/j0zf/4dA1/9/ONP/czDL/2skw/9jG
        L//VwS3/074s/9C7K//NuCn/yrUo/8eyJ//Brib/waoo/8qkM//Tnjz/zo06/5ldJ/+LUiX2g0wgQ4VO
        IQAAAAAAAAAAAAAAAADPhy4Av3coBNeOMjjZjzKR1I0we+DANZnn1jjs5tY3/+PSNf/g0DT/3s4y/9zL
        Mf/ayTD/2MYv/9XBLf/Tviz/0Lsr/824Kf/KtSj/xrEn/8CtJf/KrDH/25tB/9SJNP/Nfyr/wnUn/6Fh
        JvGJUiVKkFcnAAAAAAAAAAAAAAAAAAAAAAAAAAAAgkQSAJ1YGgEAAAAAzcQvBd7NND7gzzSq4NA08+DP
        M//ezTH/28sw/9nIL//Yxi7/1cEs/9K9K//Puir/zLcp/8m0J//Eryf/vaok8rekI8i9jySQynwovsV4
        J8q+ciWJsGgiRoVOHwyOUyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArEAAA388yAMi3
        LArXxjBO28owu9vLMPjayC//2MEw/8SsK//FsSj/z7sq/824Kf/Isyfxwq0mxrqmJIOunCFAnIscERMo
        AAC+cyURsGkiEm03EQGMTRkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAxbIpANG/LgDGuCYP3rg8ouO4Rv/jq0r/tXkw/5JoJP+kiSPlv6smgrejIz2mkx8QQzcIAHxt
        FQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAyoA2AOuuVwDkp1VF3plBy9iMMfzShSz9vHMp55ZcJ4JDMBkCek8gAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjS8HAP//kQDCdiMYzoIqZsh9KWW/dSUqrmUeB898
        JQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//g////gD///4AA//+AAP/+AAH//AAA/8AAAA+AAAAHAAAAAwAAAAMAA
        AADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAACAAAAAgAAAAQAAAB8AAAAfAAAADwAAAA8AAAAPgAAAD+AA
        AA/+AAA//4AP///Af///4P////////////8=
</value>
  </data>
</root>